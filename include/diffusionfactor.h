/* * Copyright (C) 2004-2018 David Bernstein <david.h.bernstein@gmail.com> * * This file is part of Mesh. * * Mesh is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * Mesh is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with Mesh.  If not, see <http://www.gnu.org/licenses/>.*/ #ifndef _diffusionfactor_h_#define _diffusionfactor_h_#include "dataobject.h"namespace NAMESPACE {	class DiffusionFactor : public DataObject {	public:				long Size(void) const;		DataType Type(void) const {return DIFFUSION_FACTOR;};		void SetSize(short arraySize);				void SetFactor(short index, double factor);		double Factor(short index) const;			private:		// this array will be the size of the number of faces of		// the element to which this dataobject is attached		Array<double> mFactor;	};				inline void DiffusionFactor::SetSize(short arraySize)	{		mFactor.SetSize(arraySize);				// the value -1 indicates an unset factor		for (short i = 0; i < arraySize; ++i)			mFactor[i] = -1.0;					return;	}				inline long DiffusionFactor::Size() const	{		return mFactor.Size();	}					inline void DiffusionFactor::SetFactor(short index, double factor)	{		mFactor[index] = factor;		return;	}				inline double DiffusionFactor::Factor(short index) const	{		return mFactor[index];	}}#endif // _diffusionfactor_h_